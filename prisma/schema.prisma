// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  username      String    @unique
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts               Account[]
  sessions               Session[]
  events                 Event[]
  friends                User[]          @relation("UserFriends")
  friendOf               User[]          @relation("UserFriends")
  comments               Comment[]
  attendees              Attendee[]
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  notifications          Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String     @id @default(cuid())
  name        String
  date        DateTime
  time        String
  location    String
  description String?
  duration    Int
  rsvpDeadline DateTime? // New field for RSVP deadline
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  host        User       @relation(fields: [hostId], references: [id])
  hostId      String
  comments    Comment[]
  attendees   Attendee[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String

}

enum RSVP {
  YES
  MAYBE
  NO
  PENDING
}

model Attendee {
  id            String         @id @default(cuid())
  rsvp          RSVP
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  event         Event          @relation(fields: [eventId], references: [id])
  eventId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]

  @@unique([userId, eventId])

}

model FriendRequest {
  id            String         @id @default(cuid())
  senderId      String
  receiverId    String
  status        String         @default("pending") // Can be "pending", "accepted", or "declined"
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sender        User           @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver      User           @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  notifications Notification[]

  @@unique([senderId, receiverId])
}

enum NotificationSourceType {
  ATTENDEE
  FRIEND_REQUEST
}

model Notification {
  id              String                 @id @default(uuid())
  message         String
  link            String?
  sourceType      NotificationSourceType
  attendeeId      String?
  attendee        Attendee?              @relation(fields: [attendeeId], references: [id])
  friendRequestId String?
  friendRequest   FriendRequest?         @relation(fields: [friendRequestId], references: [id])
  targetUserId    String                 @map("userId")
  targetUser      User                   @relation(fields: [targetUserId], references: [id])
  createdAt       DateTime               @default(now())

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}
